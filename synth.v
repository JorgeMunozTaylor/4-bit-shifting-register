/* Generated by Yosys 0.5+ (git sha1 f13e387, gcc 5.3.1-8ubuntu2 -O2 -fstack-protector-strong -fPIC -Os) */

(* src = "register_4_bits/register_4_conductual.v:6" *)
module register4(CLK, ENB, DIR, S_IN, MODO, D, Q, S_OUT);
  (* src = "register_4_bits/register_4_conductual.v:36" *)
  wire [3:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  (* src = "register_4_bits/register_4_conductual.v:18" *)
  input CLK;
  (* src = "register_4_bits/register_4_conductual.v:23" *)
  input [3:0] D;
  (* src = "register_4_bits/register_4_conductual.v:20" *)
  input DIR;
  (* src = "register_4_bits/register_4_conductual.v:19" *)
  input ENB;
  (* src = "register_4_bits/register_4_conductual.v:22" *)
  input [1:0] MODO;
  (* src = "register_4_bits/register_4_conductual.v:24" *)
  output [3:0] Q;
  reg [3:0] Q;
  (* src = "register_4_bits/register_4_conductual.v:21" *)
  input S_IN;
  (* src = "register_4_bits/register_4_conductual.v:25" *)
  output S_OUT;
  NOR _42_ (
    .in1(ENB),
    .in2(Q[0]),
    .out(_01_)
  );
  inverter _43_ (
    .in(DIR),
    .out(_02_)
  );
  inverter _44_ (
    .in(MODO[1]),
    .out(_03_)
  );
  NAND _45_ (
    .in1(_03_),
    .in2(MODO[0]),
    .out(_04_)
  );
  MUX _46_ (
    .enb(_04_),
    .in1(Q[1]),
    .in2(Q[3]),
    .out(_05_),
    .sel(_02_)
  );
  NAND _47_ (
    .in1(Q[1]),
    .in2(DIR),
    .out(_06_)
  );
  NAND _48_ (
    .in1(S_IN),
    .in2(_02_),
    .out(_07_)
  );
  NAND _49_ (
    .in1(_07_),
    .in2(_06_),
    .out(_08_)
  );
  NOR _50_ (
    .in1(MODO[1]),
    .in2(MODO[0]),
    .out(_09_)
  );
  NAND _51_ (
    .in1(_09_),
    .in2(_08_),
    .out(_10_)
  );
  inverter _52_ (
    .in(ENB),
    .out(_11_)
  );
  inverter _53_ (
    .in(D[0]),
    .out(_12_)
  );
  inverter _54_ (
    .in(MODO[0]),
    .out(_13_)
  );
  NAND _55_ (
    .in1(MODO[1]),
    .in2(_13_),
    .out(_14_)
  );
  NOR _56_ (
    .in1(_14_),
    .in2(_12_),
    .out(_15_)
  );
  NOR _57_ (
    .in1(_15_),
    .in2(_11_),
    .out(_16_)
  );
  NAND _58_ (
    .in1(_16_),
    .in2(_10_),
    .out(_17_)
  );
  NOR _59_ (
    .in1(_17_),
    .in2(_05_),
    .out(_18_)
  );
  NOR _60_ (
    .in1(_18_),
    .in2(_01_),
    .out(_29_)
  );
  MUX _61_ (
    .enb(MODO[1]),
    .in1(Q[0]),
    .in2(Q[2]),
    .out(_19_),
    .sel(DIR)
  );
  NOR _62_ (
    .in1(_03_),
    .in2(MODO[0]),
    .out(_20_)
  );
  NAND _63_ (
    .in1(_20_),
    .in2(D[1]),
    .out(_21_)
  );
  NAND _64_ (
    .in1(_21_),
    .in2(ENB),
    .out(_22_)
  );
  NOR _65_ (
    .in1(_22_),
    .in2(_19_),
    .out(_23_)
  );
  NOR _66_ (
    .in1(ENB),
    .in2(Q[1]),
    .out(_24_)
  );
  NOR _67_ (
    .in1(_24_),
    .in2(_23_),
    .out(_00_[1])
  );
  MUX _68_ (
    .enb(MODO[1]),
    .in1(Q[1]),
    .in2(Q[3]),
    .out(_25_),
    .sel(DIR)
  );
  NAND _69_ (
    .in1(_20_),
    .in2(D[2]),
    .out(_26_)
  );
  NAND _70_ (
    .in1(_26_),
    .in2(ENB),
    .out(_27_)
  );
  NOR _71_ (
    .in1(_27_),
    .in2(_25_),
    .out(_28_)
  );
  NOR _72_ (
    .in1(ENB),
    .in2(Q[2]),
    .out(_30_)
  );
  NOR _73_ (
    .in1(_30_),
    .in2(_28_),
    .out(_00_[2])
  );
  NAND _74_ (
    .in1(_11_),
    .in2(Q[3]),
    .out(_31_)
  );
  NAND _75_ (
    .in1(Q[2]),
    .in2(_02_),
    .out(_32_)
  );
  NAND _76_ (
    .in1(S_IN),
    .in2(DIR),
    .out(_33_)
  );
  NAND _77_ (
    .in1(_33_),
    .in2(_32_),
    .out(_34_)
  );
  NAND _78_ (
    .in1(_34_),
    .in2(_09_),
    .out(_35_)
  );
  MUX _79_ (
    .enb(_04_),
    .in1(Q[0]),
    .in2(Q[2]),
    .out(_36_),
    .sel(_02_)
  );
  inverter _80_ (
    .in(D[3]),
    .out(_37_)
  );
  NOR _81_ (
    .in1(_14_),
    .in2(_37_),
    .out(_38_)
  );
  NOR _82_ (
    .in1(_38_),
    .in2(_36_),
    .out(_39_)
  );
  NAND _83_ (
    .in1(_39_),
    .in2(_35_),
    .out(_40_)
  );
  NAND _84_ (
    .in1(_40_),
    .in2(ENB),
    .out(_41_)
  );
  NAND _85_ (
    .in1(_41_),
    .in2(_31_),
    .out(_00_[3])
  );
  MUX _86_ (
    .enb(_20_),
    .in1(Q[0]),
    .in2(Q[3]),
    .out(S_OUT),
    .sel(_02_)
  );
  (* src = "register_4_bits/register_4_conductual.v:36" *)
  always @(posedge CLK)
      Q[0] <= _29_;
  (* src = "register_4_bits/register_4_conductual.v:36" *)
  always @(posedge CLK)
      Q[1] <= _00_[1];
  (* src = "register_4_bits/register_4_conductual.v:36" *)
  always @(posedge CLK)
      Q[2] <= _00_[2];
  (* src = "register_4_bits/register_4_conductual.v:36" *)
  always @(posedge CLK)
      Q[3] <= _00_[3];
endmodule
